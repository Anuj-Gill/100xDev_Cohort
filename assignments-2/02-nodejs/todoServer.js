/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
  const express = require('express');
  const bodyParser = require('body-parser');
  
  const app = express();

  let todoList = []

function assignId(list){
  for(let i = 0; i < todoList.length; i++){
    let todoObj = todoList[i];
    todoObj["id"] = i + 1;
  }

  return todoList;
}

const todoListId = assignId(todoList);
todoList = todoListId;

  app.use(bodyParser.json());

  app.get('/todos',(req,res) => {
    const responseArray = [];
    for (let i = 0; i < todoList.length; i++) {
      const todoItem = todoList[i];
      const todoString = `<b>Title</b>: ${todoItem.title}    <b>Description</b>: ${todoItem.descp}   <b>Completed</b>: ${todoItem.completed}`;
      responseArray.push(todoString);
    }
    res.status(200).send(responseArray.join('<br>'));
  })

  app.get('/todos/:id',(req,res) => {
    const param = req.params.id;
    for(let i = 0; i < todoList.length; i++){
      if(todoList[i]["id"] == param){
        res.send(`<b>Title</b>: ${todoList[i]["title"]}    <b>Description</b>: ${todoList[i]["descp"]} <b>Completed</b>: ${todoList[i].completed}`)
      } 
    }
    res.status(404).send("Task not found!")

  })

  app.post('/todos',(req,res) => {
    const todoObj = req.body;
    todoObj["id"] = 0;
    todoList.push(todoObj);
    const updatedTodoList = assignId(todoList)
    res.status(201).send("Recieved the todo to be added")
  })

  app.put('/todos/:id',(req,res) => {
    const items = ["title","descp","completed"];
    const id = req.params.id;
    const obj = todoList[id-1]
    const objBody = req.body;
    for(let i = 0; i < items.length; i++){
      if(!objBody[items[i]]){
        todoList[id-1][items[i]] = obj[items[i]];

      } else{
        todoList[id-1][items[i]] = objBody[items[i]]
      }
    }
    const updatedTodoList = assignId(todoList);
    // console.log(todoList);
    res.send(`Task with id: ${id} has been updated!!`)

  })

  app.delete("/todos/:id",(req,res) => {
    const id = req.params.id;
    if(id <= todoList.length){
      todoList.splice(id - 1,1);
      // updatedTodoList = assignId(todoList);
      res.send(`Task at ${id} has been deleted!!`)
    }
    else{
      res.status(404).send("File not found!");
    }
  })

  app.listen(3000)
  
  module.exports = app;